---
title: "Data Summarization"
author: "Jubayer Hossain"
institute: "[Founder & Instructor, CHIRAL Bangladesh](https://chiralbd.org/)"
date: "`r format(Sys.time(), '%d %B %Y')`"
output:
  html_document:
    toc: true
    #number_sections: true
    toc_depth: 6
    toc_float: true 
    theme: flatly
---


```{r, echo = FALSE, message=FALSE, error = FALSE}
library(knitr)
opts_chunk$set(comment = "", message = FALSE)
suppressWarnings({library(dplyr)})
library(readr)
library(tidyverse)
library(jhur)
```



## Recap

- `select()`: subset and/or reorder columns
- `filter()`: remove rows
- `arrange()`: reorder rows
- `mutate()`: create new columns or modify them
- `select()` and `filter()` can be combined together
- remove a column: `select()` with negative sign (`-col_name`)
- you can do sequential steps: especially using pipes `%>%`

üìÉ[Cheatsheet]()

## Data Summarization

* Basic statistical summarization
    * `mean(x)`: takes the mean of x 
    * `sd(x)`: takes the standard deviation of x
    * `median(x)`: takes the median of x
    * `quantile(x)`: displays sample quantiles of x. Default is min, IQR, max
    * `range(x)`: displays the range. Same as `c(min(x), max(x))`
    * `sum(x)`: sum of x
    * `max(x)`: maximum value in x
    * `min(x)`: minimum value in x
    
* **all have the ** `na.rm =` **argument for missing data**

## Statistical summarization

The vector getting summarized goes inside the parentheses:

```{r}
x <- c(1, 5, 7, 4, 2, 8)
mean(x)
range(x)
sum(x)
```

## Statistical summarization

Note that many of these functions have additional inputs regarding missing data, typically requiring the `na.rm` argument ("remove NAs"). 

```{r error = TRUE}
x <- c(1, 5, 7, 4, 2, 8, NA)
mean(x)
mean(x, na.rm = TRUE)
quantile(x)
quantile(x, na.rm = TRUE)
```

## Statistical summarization{.codesmall}

We will talk more about data types later, but you can only do summarization on numeric or logical types. Not characters.

```{r error = TRUE}
x <- c(1, 5, 7, 4, 2, 8)
sum(x)
y <- c(TRUE, FALSE, FALSE, TRUE) # FALSE == 0 and TRUE == 1
sum(y)
z <- c("TRUE", "FALSE", "FALSE", "TRUE")
sum(z)
```

## Some examples

We can use the `jhu_cars` to explore different ways of summarizing data.  The `head` command displays the first rows of an object:

```{r}
library(jhur)
head(jhu_cars)
```

## Statistical summarization

You might see base R `$` to reference/select columns from a `data.frame`/`tibble`:

```{r}
mean(jhu_cars$hp)
quantile(jhu_cars$hp)
```

## Statistical summarization

The "tidy" way:

```{r}
jhu_cars %>% pull(hp) %>% mean() # alt: pull(jhu_cars, hp) %>% mean()
jhu_cars %>% pull(hp) %>% quantile()
```

## Statistical summarization

```{r}
jhu_cars %>% pull(wt) %>% median()
jhu_cars %>% pull(wt) %>% quantile(probs = 0.6)
```

## Data Summarization on data frames

* Basic statistical summarization
    * `rowMeans(x)`: takes the means of each row of x
    * `colMeans(x)`: takes the means of each column of x
    * `rowSums(x)`: takes the sum of each row of x
    * `colSums(x)`: takes the sum of each column of x
    * `summary(x)`: for data frames, displays the quantile information

## TB Incidence 

Let's read in a `tibble` of values from TB incidence.

If you have the `jhur` package installed successfully:

```{r}
tb <- jhur::read_tb()
```

<br>
If not, download the `xlsx` file from this link and read it in using `read_csv()`: http://jhudatascience.org/intro_to_r/data/tb_incidence.xlsx

## TB Incidence 

Check out the data:

```{r}
head(tb)
```

## TB Incidence 

Check out the data:

```{r}
str(tb)
```

## Indicator of TB

Before we go further, let's rename the first column using the `rename()` function in `dplyr`.

In this case, we have to use the backticks (\`) because there are spaces and funky characters in the name:

```{r}
library(dplyr)
tb <- tb %>% rename(country = `TB incidence, all forms (per 100 000 population per year)`)
```

## Indicator of TB

`colnames()` will show us the column names and show that country is renamed:

```{r}
colnames(tb)
```

## Summarize the data: `dplyr` `summarize()` function

`summarize` creates a summary table of a column you're interested in.

<div class = "codeexample">
```{r, eval = FALSE}
# General format - Not the code!
{data to use} %>% 
   summarize({summary column name} = {operator(source column)}) 
```
</div>

```{r}
tb %>% 
  summarize(mean_2006 = mean(`2006`, na.rm = TRUE))
```

## Summarize the data: `dplyr` `summarize()` function

`summarize()` can do multiple operations at once. Just separate by a comma.

```{r}
tb %>% 
  summarize(mean_2006 = mean(`2006`, na.rm = TRUE),
            median_2007 = median(`2007`, na.rm = TRUE),
            median(`2004`, na.rm = TRUE))
```

<br>
Notice how when we forget to provide a new name, output is still provided, but the column name is messy.

## Summarize the data: `dplyr` `summarize()` function

This looks better.

```{r}
tb %>% 
  summarize(mean_2006 = mean(`2006`, na.rm = TRUE),
            median_2007 = median(`2007`, na.rm = TRUE),
            median_2004 = median(`2004`, na.rm = TRUE))
```

## Iterative summaries: `dplyr` `summarize()` and `across()` functions

Use the [`across`](https://dplyr.tidyverse.org/reference/across.html) function with `summarize()` to summarize across multiple columns of your data.

<div class = "codeexample">
```{r, eval = FALSE}
# General format - Not the code!
across({ columns to go across }, ~ { summarization_function(.x, na.rm = ..) }) 
```
</div>

```{r}
tb %>% 
  summarize(across( c(`1990`, `1991`, `1992`, `1993`), ~ sum(.x, na.rm = TRUE)))
```

## Iterative summaries: `dplyr` `summarize()` and `across()` functions

Another example using select helpers:

```{r}
tb %>% 
  summarize(across( starts_with("2"), ~ range(.x, na.rm = TRUE)))
```


## Row means

`colMeans()` and `rowMeans()` require **all numeric data**. 

Let's see what the mean is across each row (country):

```{r}
tb_2 <- column_to_rownames(tb, var = "country") # opposite of rownames_to_column() !
head(tb_2, n = 2)
rowMeans(tb_2, na.rm = TRUE)
```

## Row means

`colMeans()` gives you very similar output to functions we've seen previously in this lecture (`summarize()` and `across()`).

```{r}
colMeans(tb_2, na.rm = TRUE)
tb_2 %>% 
  summarize(across( colnames(tb_2), ~ mean(.x, na.rm = TRUE)))
```

## `summary()` Function

Using `summary()` can give you rough snapshots of each numeric column (character columns are skipped):

```{r}
summary(tb)
```

## Lab Part 1

üè† [Class Website](https://jhudatascience.org/intro_to_r/)

üíª [Lab](https://jhudatascience.org/intro_to_r/modules/Data_Summarization/lab/Data_Summarization_Lab.Rmd)

## Youth Tobacco Survey

Here we will be using the Youth Tobacco Survey data:
http://jhudatascience.org/intro_to_r/data/Youth_Tobacco_Survey_YTS_Data.csv

```{r}
yts <- jhur::read_yts()
head(yts)
```

## Column to vector

Let's work with one column as a vector using `pull()`.

```{r, message = FALSE}
locations <- yts %>% pull(LocationDesc)
locations
```

## Length and unique

`unique(x)` will return the unique elements of `x`

```{r, message = FALSE}
unique(locations)
```

## Length and unique

`length` will tell you the length of a vector. Combined with `unique`, tells you the number of unique elements:

```{r}
length(unique(locations))
```

## `table` and `dplyr`: `count` 

`table(x)` will return a frequency table of unique elements of `x`

```{r, message = FALSE}
table(locations)
```

## `table` and `dplyr`: `count` 

Use `count` directly on a data.frame and column without needing to use `pull()`.

```{r, message = FALSE}
yts %>% count(LocationDesc)
```

## `table` and `dplyr`: `count` 

Multiple columns listed further subdivides the count.

```{r, message = FALSE}
yts %>% count(LocationDesc, TopicDesc)
```

## `table` and `dplyr`: `count` 

Multiple columns listed further subdivides the count.

```{r, message = FALSE}
yts %>% count(LocationDesc, TopicDesc)
```

<br>

**Note:** `count()` includes NAs but `table()` does not


# Grouping

## Perform Operations By Groups: dplyr

`group_by` allows you group the data set by variables/columns you specify:

```{r}
# Regular data
yts
```

## Perform Operations By Groups: dplyr

`group_by` allows you group the data set by variables/columns you specify:

```{r}
yts_grouped <- yts %>% group_by(Response)
yts_grouped
```

## Summarize the grouped data

It's grouped! Grouping doesn't change the data in any way, but how **functions operate on it**. Now we can summarize `Data_Value` (percent of respondents) by group:

```{r}
yts_grouped %>% summarize(avg_percent = mean(Data_Value, na.rm = TRUE))
```

## Use the `pipe` to string these together!

Pipe `yts` into `group_by`, then pipe that into `summarize`:

```{r}
yts %>%
  group_by(Response) %>%
  summarize(avg_percent = mean(Data_Value, na.rm = TRUE),
            max_percent = max(Data_Value, na.rm = TRUE))
```

## Ungroup the data

The `ungroup` function will allow you to clear the groups from the data. You can also overwrite the first `group_by` with a new one.

```{r}
yts = ungroup(yts)
yts
```

## `group_by` with `mutate` - just add data

We can also use `mutate` to calculate the mean value for each year and add it as a column:

```{r}
yts %>%
  group_by(YEAR) %>%
  mutate(year_avg = mean(Data_Value, na.rm = TRUE)) %>%
  select(LocationDesc, Data_Value, year_avg)
```

## Counting

There are other functions, such as `n()` count the number of observations.

```{r}
yts %>%
  group_by(YEAR) %>%
  summarize(n = n(),
            mean = mean(Data_Value, na.rm = TRUE))
```

## Lab Part 2

üè† [Class Website](https://jhudatascience.org/intro_to_r/)

üíª [Lab](https://jhudatascience.org/intro_to_r/modules/Data_Summarization/lab/Data_Summarization_Lab.Rmd)

# Preview: plotting

## Basic Plots

Plotting is an important component of exploratory data analysis. These are some rough plots that you can use in real time while exploring your data. We will go over formatting and making plots look nicer in additional lectures.

* Basic summarization plots: 
    * `hist(x)`: histogram of x
    * `plot(x,y)`: scatterplot of x and y
    * `boxplot(y~x)`: boxplot of y against levels of x

## Histogram

```{r}
mpg <- jhu_cars %>% pull(mpg)
hist(x = mpg)
```

## Histogram

Use the `breaks =` argument to tweak the resolution:

```{r}
hist(x = mpg, breaks = 10)
```

## Scatterplot

```{r}
mpg <- jhu_cars %>% pull(mpg)
hp <- jhu_cars %>% pull(hp)
plot(x = hp, y = mpg) # plot(hp, mpg)
```

## Boxplot

```{r}
cyl <- jhu_cars %>% pull(cyl)
hp <- jhu_cars %>% pull(hp)
boxplot(formula = hp ~ cyl)
```

## Summary

- summary stats (`mean()`) work with `pull()`
- `summary(x)`: quantile information
- `summarize`: creates a summary table of columns of interest
  - combine with `across()` to programmatically select columns
- `count(x)`: what unique values do you have? 
  - `pull()` + `table()`
  - `unique()` combined with `length()`
- `group_by()`: changes all subsequent functions
  - combine with `summarize()` to get statistics per group
- `plot()` and `hist()` are great for a **quick snapshot** of the data

## Lab Part 3

üè† [Class Website](https://chiraltraining.github.io/WW01_DataAnalysiswithR/)

üíª [Lab](https://chiraltraining.github.io/WW01_DataAnalysiswithR/)

