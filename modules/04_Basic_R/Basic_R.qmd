---
title: "Basic R"
author: "Jubayer Hossain"
institute: "[Founder & Instructor, CHIRAL Bangladesh](https://chiralbd.org/)"
date: "`r format(Sys.time(), '%d %B %Y')`"
output:
  html_document:
    toc: true
    #number_sections: true
    toc_depth: 6
    toc_float: true 
    theme: cosmo
--- 


```{r, echo = FALSE}
library(knitr)
opts_chunk$set(comment = "")
```

# Agenda 
- Introduction to R
- Getting Started
- Variables and Reserved Keywords
- Data Types in R
- Operators


## Common new users frustrations

1.  **Different versions of software**
1.  **Data type problems (is that a character or a number?)**
2.  Working directory problems: trying to read files that R "can't find"
    - RStudio can help, and so do RStudio Projects
    - discuss in Data Input/Output lecture
3.  Typos (R is **case sensitive**, `x` and `X` are different)
    - RStudio helps with "tab completion"
    - discussed throughout
    
  

## Explaining output 

In slides, a command (we'll also call them code or a code chunk) will look like this

```{r code}
print("Hello World!")
```

And then directly after it, will be the output of the code.  
So `print("I'm code")` is the code chunk and [1] "I'm code" is the output.

## R as a calculator

```{r calcDemo}
2 + 2
2 * 4
2^3
```

Note: when you type your command, R inherently thinks you want to print the result. 

## R as a calculator

- The R console is a full calculator
- Try to play around with it:
    - +, -, /, * are add, subtract, divide and multiply
    - ^ or ** is power
    - parentheses -- ( and ) -- work with order of operations 
    - %% finds the remainder

## R as a calculator

```{r calcDemo2}
2 + (2 * 3)^2
(1 + 3) / 2 + 45
6 / 2 * (1 + 2)
```

```{r, fig.alt="Problem gives answer of 1 or 9 depending on calculator.", out.width = "30%", echo = FALSE, out.extra='style="float:left"'}
knitr::include_graphics("images/Basic_R_calculator.jpg")
```

```{r, fig.alt="Problem gives answer of 1 or 9 depending on calculator.", out.width = "60%", echo = FALSE, out.extra='style="float:left"'}
knitr::include_graphics("images/Basic_R_viral_math_problem.png")
```

## R as a calculator

Try evaluating the following:

- `2 + 2 * 3 / 4 -3`
- `2 * 3 / 4 * 2`
- `2^4 - 1`

## Commenting in Scripts

`#` creates a comment in R code

```{r}
# this is a comment

# nothing to its right is evaluated

# this # is still a comment
### you can use many #'s as you want

1 + 2 # Can be the right of code
```

In an `.Rmd` file, you can write notes outside the R chunks.

## Assigning values to objects

- You can create objects from within the R environment and from files on your computer
- R uses `<-` to assign values to an object name (you might also see `=` used, but this is not best practice)
- Object names are case-sensitive, i.e. X and x are different

```{r assign}
x <- 2
x
x * 4
x + 2
```


# Variables(Identifiers) in R
- Variables are used to **store data**, whose value can be changed according to our need. 
- A variable is a name given to a memory location, which is used to store values in a computer program.
- Variables in R programming can be used to store numbers (real and complex), words, matrices, and even tables.  
- R is a dynamically programmed language which means that unlike other programming languages, we do not have to declare the data type of a variable before we can use it in our program. 
- Unique name given to variable (function and objects as well) is **identifier**.


# Rules for writing Identifiers in R
- Identifiers can be a combination of letters, digits, period (.) and underscore (_). 
- It must start with a letter or a period. If it starts with a period, it cannot be followed by a digit.
- It should not start with a number (e.g: 2x) 
- It should not start with a dot followed by a number (e.g: .2x)  
- It should not start with an underscore (e.g: _x) 
- Reserved words in R cannot be used as identifiers(e.g: TRUE, FALSE) 

Basically, there are 5 naming conventions 
- alllowercase: e.g. `myname`
- period.separated: e.g. `new.name`
- underscore_separated: e.g. `my_name`
- lowerCamelCase: e.g. `myName`
- UpperCamelCase: e.g. `MyName`


# Creating Variables
Using equal(`=`) operator
```{r echo=TRUE}
x = 10 
```
Using leftward(`<-`) operator 
```{r echo=TRUE}
y <- 15  
```

#  Reserved Keaywords in R
- Don’t use any reserved keyword as variable name. List all of reserved words in R by using (?Reserved). 

```{r, echo=TRUE}
?Reserved
```

# Entering Input
At the R prompt/console we type expressions. 
```{r echo=TRUE}
num <- 10
```
The `<-` symbol is the **assignment** operator. 
The grammar of the language determines whether an expression is complete or not.


# Evaluation
When a complete expression is entered at the R console, it is evaluated and the result of evaluated expression is returned. The result may be auto-printed. 
```{r}
x <- 10
x
```

```{r}
x <- 10
print(x)
```

```{r}
x <- 10
cat(x)
```

## Assigning values to objects

- The most comfortable and familiar class/data type for many of you will be `data.frame`
- You can think of these as essentially spreadsheets with rows (usually subjects or observations) and columns (usually variables)
- `data.frame`s are somewhat advanced objects in R; we will start with simpler objects

## Assigning values to objects

- Here we introduce "1 dimensional" classes; often referred to as 'vectors'
- Vectors can have multiple sets of observations, but each observation has to be the same class.

```{r assignClass}
class(x)
y <- "hello world!"
print(y)
class(y)
```

## Simple object practice

Try assigning your full name to an R object called `name`

## Simple object practice

Try assigning your full name to an R object called `name`

```{r myName}
name <- "Ava Hoffman"
name
```

## The 'combine' function

The function `c()` collects/combines/joins single R objects into a vector of R objects. It is mostly used for creating vectors of numbers, character strings, and other data types. 

```{r assign3a}
x <- c(1, 4, 6, 8)
x
class(x)
```

## The 'combine' function

Try assigning your first and last name as 2 separate character strings into a single vector called `name2`

## The 'combine' function

Try assigning your first and last name as 2 separate character strings into a length-2 vector called `name2`

```{r myName2}
name2 <- c("Ava", "Hoffman")
name2
```

## Arguments inside R functions

- The contents you give to an R function are called "arguments"
- Here, R assumes all arguments should be objects contained in the vector
- We will talk more about arguments as we use more complicated functions!

```{r eval = FALSE}
name2 <- c("Ava", "Hoffman")
# Arg 1    ^^^^^
```

```{r eval = FALSE}
name2 <- c("Ava", "Hoffman")
# Arg 2           ^^^^^^^^^
```

## `length` of R objects

`length()`: Get or set the length of vectors (including lists) and factors, and of any other R object for which a method has been defined.

```{r assign3b}
length(x)
y
length(y)
```

## `length` of R objects

What do you expect for the length of the `name` object? What about the `name2` object?

What are the lengths of each?

##  `length` of R objects

What do you expect for the length of the `name` object? What about the `name2` object?

What are the lengths of each?

```{r myName3}
length(name)
length(name2)
```

## Math + vector objects

You can perform functions to entire vectors of numbers very easily.

```{r assign4}
x + 2
x * 3
x + c(1, 2, 3, 4)
```

## Lab Part 1

💻 [Lab](https://jhudatascience.org/intro_to_r/modules/Basic_R/lab/Basic_R_Lab.Rmd)

## Math + vector objects

But things like algebra can only be performed on numbers.

```{r, error=TRUE}
name2 + 4
```

## Reassigning to a new object

Save these modified vectors as a new vector called `y`.

```{r assign5}
y <- x + c(1, 2, 3, 4)
y
```

Note that the R object `y` is no longer "hello  world!" - It has been overwritten by assigning new data to the same name.

## Reassigning to a new object

Reassigning allows you to make changes "in place"

```{r eval = FALSE}
# results not stored:
x + c(1, 2, 3, 4)

# x remains unchanged, results stored in `y`:
y <- x + c(1, 2, 3, 4)

# replace `x` in place
x <- x + c(1, 2, 3, 4)
```

## R objects

You can get more attributes than just class. The function `str()` gives you the structure of the object.

```{r assign2}
str(x)
str(y)
```

This tells you that `x` is a numeric vector and tells you the length.

## R objects

This is handy when we start dealing with bigger / more complex objects.

```{r include=FALSE}
z <- sample(y, size = 100, replace = T)
```

```{r}
str(z)
```

# Comments in R
The # character indicates a comment. 
```{r}
x <- 10 # This is a comment
```
Anything to the right of the # (inlcuding the # itself) is ignored. \
This is only comment character in R. \
R does not support multi-line comments or comment block.


# Data Types in R
R has five basic data types 
- character(e.g: 'abul', "abul")
- numeric(e.g: 2, 3)
- integer(e.g: 5L)
- complex(e.g: 5i)
- logical(True/False)

# Numbers
* Numbers in R generally treated as numeric objects(i.e. double precision real numbers)
* If you explicitly want an integer, you need to specify the `L` suffix.
* There is also a special number `Inf` which is represents infinity; e.g. `1 / 0`
* `Inf` can be used in ordinary calculations; e.g. `1/Inf` is `0`
* The value `NaN` represents an undefined value("not a number"); e.g. `0/0` 
* `NaN` can also be thought of as a missing value. 

The numeric constants are 

- integer(`L`)
- double
- complex(`i`) 


# Creating Numeric Objects


```{r}
# Create numeric object
n <- 5  
```
```{r}
# Check type of object
typeof(n)
```


```{r}
# Create an integer type object 
i = 5L 
```
```{r}
# Check type of object
typeof(i)
```

# Creating Numeric Objects

```{r}
# Create a double type object 
d = 22
```
```{r}

# Check type of object
typeof(d)
```
```{r}
# Create a complex type object 
c = 4i 
```

```{r}
# Check type of object
typeof(c)
```


# Characters
Character constants can be represented using either single quotes ('') or double quotes ("") as delimiters.

```{r}
# Create a character type object 
char = "Hello"
```
```{r}
# Check type of object 
typeof(char)
```


# Atributes
R objects can have attributes 

* names, dimnames 
* dimensions(e.g. matrices, arrays)
* class 
* length 
* other user-defined attributes/metadata

Attributes of an object can be accessed using the `attributes()` function.

# Built-in Constants in R

```{r}
pi # value of pi 
LETTERS
```

```{r}
month.name 
```

# Operators in R
- R has many operators to carry out different mathematical and logical operations.
- Operators in R can mainly be classified into the following categories. 
  1. Arithmetic Operators 
  2. Relational Operators
  3. Logical Operators 
  4. Assignment Operators 
  
  
# Arithmetic Operators

```{r}
x <- 10 
y <- 2 
```


```{r}
# Addition
x+y
# Subtraction
2-5
```


# Arithmetic Operators
```{r}
# Multiplication
2 * 5 

# Division
2 / 5 

# Exponent 
2 ^ 5
```

# Arithmetic Operators

```{r}
# Modulus(Remainder from division)
2 %% 5

# Integer Division 
2 %/% 5
```


# Logical Operators
```{r}
# Logical NOT(!)
! TRUE
! FALSE   
```

# Logical Operators
```{r}
# Logical AND(&&)
TRUE && TRUE
TRUE && FALSE 
FALSE && FALSE 
```


# Logical Operators
```{r}
# Logical OR(|)
TRUE | TRUE 
TRUE | FALSE 
FALSE | FALSE    
```

# Relational Operators
```{r}
x <- 10
y <- 5 
# Equality 
x == y 

# Inequality
x != y 

# Less Than 
x < y 
```

# Relational Operators
```{r}
# Greater Than 
x > y 
# Less or Equal 
x <= y 
# Greater or Equal
x >= y 
```



## Summary

- R functions as a calculator
- Use `<-` to save (assign) values to objects
- Use `c()` to **combine** vectors
- `length()`, `class()`, and `str()` tell you information about an object

🏠 [Class Website](https://chiraltraining.github.io/WW01_DataAnalysiswithR/)

💻 [Basic R Lab](https://chiraltraining.github.io/WW01_DataAnalysiswithR/)
