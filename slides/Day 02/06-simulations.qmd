# Simulations - Generating Random Numbers 

## Simulations
- Simulations play a crucial role in statistical analysis and modeling.
- R provides various functions to generate random numbers and conduct simulations.

## Generating Random Numbers
- runif(): Generates random numbers from a uniform distribution.
- Syntax: runif(n, min = 0, max = 1)
- n: Number of random numbers to generate.
- min: Minimum value of the range.
- max: Maximum value of the range.

```{r}
# Generate 5 random numbers between 0 and 1
random_numbers <- runif(5)
```

## Generating Random Integers
- sample(): Generates random integers from a specified range.
- Syntax: sample(x, size, replace = FALSE)
- x: A vector of values from which to sample.
- size: Number of random integers to generate.
- replace: Whether sampling should be done with replacement.

```{r}
# Generate 3 random integers from 1 to 10
random_integers <- sample(1:10, 3)
```

## Generating Random Samples from a Vector
- sample(): Generates random samples from a vector.
- Syntax: sample(x, size, replace = FALSE)
- x: A vector of values from which to sample.
- size: Number of random samples to generate.
- replace: Whether sampling should be done with replacement.

```{r}
# Generate a random sample of 4 elements from a vector
vector <- c("A", "B", "C", "D", "E")
random_sample <- sample(vector, 4)
```

## Generating Random Numbers from Distributions
- R provides functions to generate random numbers from various probability distributions:
  - rnorm(): Generates random numbers from a normal distribution.
  - rexp(): Generates random numbers from an exponential distribution.
  - rgamma(): Generates random numbers from a gamma distribution.
  - rbinom(): Generates random numbers from a binomial distribution.
  - rpois(): Generates random numbers from a Poisson distribution.
  
```{r}
# Generate 5 random numbers from a normal distribution with mean 0 and standard deviation 1
random_numbers <- rnorm(5, mean = 0, sd = 1)
```

## Seeding Random Number Generation
- To reproduce random results, set a seed value using set.seed().
- Syntax: set.seed(seed)
- seed: A numeric value to initialize the random number generator.

```{r}
# Set a seed value for reproducibility
set.seed(123)
```

# Questions? 
`r fontawesome::fa("link", fill = fa_fill)` [hossainlab.github.io](https://hossainlab.github.io/)

`r fontawesome::fa("twitter", fill = fa_fill)` [\@JHossain_28](https://twitter.com/JHossain_28)

`r fontawesome::fa("linkedin", fill = fa_fill)` [linkedin.com/in/hossainmj](https://www.linkedin.com/in/hossainmj/)

`r fontawesome::fa("github", fill = fa_fill)` [github.com/hossainlab](https://github.com/hossainlab/)

