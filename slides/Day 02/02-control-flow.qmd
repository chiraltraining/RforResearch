# Control Flow in R 

## Control Flow Structure 
- Control flow refers to the order in which instructions are executed in a program. 
- In R, control flow is managed through various constructs that allow for `conditional` execution, `loop` iterations, and branching. 
- Conditionals - `if`, `if..else`, `if..else..elif`
- Loops - `for`, `while`, `repeat`


## `if` statement

The `if` statement allows for conditional execution of code blocks.

```{r, eval=FALSE}
# Syntax 
if (condition) {
  # Code block executed when condition is TRUE
}

```

## `if` statement
```{r}
# example 
x <- 5

if (x > 0) {
  print("x is positive.")
}
```

* The variable `x` is assigned a value of `5`.
* The `if` statement checks if `x` is greater than `0`.
* Since the condition is `TRUE` (5 is greater than 0), the code block inside the curly braces is executed.
* Result: The message `"x is positive."` is printed.


## `if..else` statement
The if-else statement allows you to execute different code blocks based on a condition.

```{r, eval=FALSE}
# Syntax 
if (condition) {
  # Code block executed when condition is TRUE
} else {
  # Code block executed when condition is FALSE
}
```

## `if..else` statement
```{r}
# example 
x <- -2

if (x > 0) {
  print("x is positive.")
} else {
  print("x is negative.")
}
```

* The variable `x` is assigned a value of `-2`.
* The `if` statement checks if `x` is greater than 0.
* Since the condition is `FALSE` (-2 is not greater than 0), the code block inside the else clause is executed.
* Result: The message `"x is negative."` is printed.



## `if..else if..else` statement 

The if-else if-else statement allows you to specify multiple conditions and execute different code blocks accordingly.

```{r, eval=FALSE}
# Syntax 
if (condition1) {
  # Code block executed when condition1 is TRUE
} else if (condition2) {
  # Code block executed when condition1 is FALSE and condition2 is TRUE
} else {
  # Code block executed when all previous conditions are FALSE
}
```

## `if..else if..else` statement 

```{r}
# example 
x <- 0

if (x > 0) {
  print("x is positive.")
} else if (x < 0) {
  print("x is negative.")
} else {
  print("x is zero.")
}
```

* The variable `x` is assigned a value of` 0`.
* The `if` statement checks if x is greater than 0, then if it is less than 0.
* Since none of the conditions are `TRUE`, the code block inside the else clause is executed.
* Result: The message `"x is zero."` is printed.



## `ifelse` function

* The `ifelse()` function in R is a vectorized version of the if-else statement. 
* It allows you to perform conditional operations on elements of a vector or data frame based on a specified condition. 

```{r, eval=FALSE}
# Syntax 
ifelse(condition, true_value, false_value)
```

## `ifelse` function
```{r}
# example 
x <- c(1, 2, 3, 4, 5)
result <- ifelse(x > 3, "Greater", "Less or equal")
result
```

* The vector x contains numeric values.
* The ifelse function checks if each element of x is greater than 3.
* For elements that satisfy the condition (TRUE), the corresponding element in the result is assigned the value "Greater". Otherwise, it is assigned the value "Less or equal".
* Result: The result vector will be c("Less or equal", "Less or equal", "Less or equal", "Greater", "Greater").

## Handling Missing Values with `ifelse()`
The ifelse function can handle missing values `(NA)` in the input vectors.

```{r}
x <- c(1, 2, NA, 4, 5)

result <- ifelse(is.na(x), "Missing", ifelse(x > 3, "Greater", "Less or equal"))
result
```

* The vector x contains numeric values, including a missing value (NA).
* The first ifelse checks if each element of x is missing (NA).
* If TRUE, the element is assigned the value "Missing".
* If FALSE, the second ifelse checks if the element is greater than 3, assigning "Greater" or "Less or equal" accordingly.
* Result: The result vector will be c("Less or equal", "Less or equal", "Missing", "Greater", "Greater").


## `ifelse()` with Data Frames
The `ifelse()` function can be applied to specific columns of a data frame.

```{r}
df <- data.frame(Name = c("John", "Alice", "Emily"), Age = c(25, 30, 35))

df$Category <- ifelse(df$Age >= 30, "Senior", "Junior")
```
* The data frame df contains columns for names and ages.
* The ifelse function is applied to the Age column.
* If the age is greater than or equal to 30, the Category column is assigned the value "Senior". Otherwise, it is assigned "Junior".
* Result: The df data frame will have an additional column Category with values c("Junior", "Junior", "Senior").

## `for` loop 
The `for` loop in R allows for executing a block of code repeatedly for a specified number of iterations.

```{r, eval=FALSE}
# Syntax 
for (variable in sequence) {
  # Code block to be executed in each iteration
}
```

## `for` loop Example 
```{r}
# Example 
for (i in 1:5) {
  print(i)
}
```

* The for loop iterates over the sequence 1:5.
* In each iteration, the loop variable i takes the value of the current element in the sequence.
* The code block inside the curly braces is executed for each iteration, which in this case, is printing the value of i.
* Result: The numbers 1 to 5 are printed.

## Using `for` Loop with Vector
The `for` loop can be used to iterate over elements of a vector.

```{r}
fruits <- c("apple", "banana", "orange")

for (fruit in fruits) {
  print(fruit)
}
```

* The vector fruits contains strings representing different fruits.
* The for loop iterates over each element of the fruits vector.
* In each iteration, the loop variable fruit takes the value of the current element.
* The code block inside the curly braces is executed for each iteration, which in this case, is printing the value of fruit.
* Result: The strings "apple", "banana", and "orange" are printed.


## Controlling `for` Loop with Conditions
You can control the behavior of a `for` loop using conditional statements.

```{r}
for (i in 1:10) {
  if (i %% 2 == 0) {
    print(paste(i, "is even"))
  } else {
    print(paste(i, "is odd"))
  }
}
```

## Controlling `for` Loop with Conditions
* The for loop iterates over the sequence 1:10.
* In each iteration, the loop variable i takes the value of the current element.
* The if statement checks if i is even (divisible by 2) using the modulo operator (%%).
* Based on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.
* Result: The numbers from 1 to 10 are printed along with their even or odd classification.


## `while` loop 
The `while` loop in R allows for executing a block of code repeatedly as long as a specified condition is `TRUE.`

```{r, eval=FALSE}
while (condition) {
  # Code block to be executed
}
```

## `while` Loop Example
```{r}
i <- 1

while (i <= 5) {
  print(i)
  i <- i + 1
}
```

* The variable i is initially set to 1.
* The while loop continues executing as long as i is less than or equal to 5.
* In each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.
* After printing, i is incremented by 1 using the assignment statement i <- i + 1.
* The loop continues until i becomes greater than 5, at which point the condition becomes FALSE, and the loop terminates.
* Result: The numbers 1 to 5 are printed.

## Using `while` Loop with Conditional Statements

You can use conditional statements within a while loop to control its behavior.

```{r}
i <- 1

while (i <= 10) {
  if (i %% 2 == 0) {
    print(paste(i, "is even"))
  } else {
    print(paste(i, "is odd"))
  }
  i <- i + 1
}
```

## Using `while` Loop with Conditional Statements

* The variable i is initially set to 1.
* The while loop continues executing as long as i is less than or equal to 10.
* In each iteration, the if statement checks if i is even (divisible by 2) using the modulo operator (%%).
* Based on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.
* After executing the code block, i is incremented by 1 using the assignment statement i <- i + 1.
* Result: The numbers from 1 to 10 are printed along with their even or odd classification.

##  Controlling `while` Loop with External Conditions

You can control the behavior of a `while` loop by modifying external conditions within the loop.

```{r}
x <- 10

while (x > 0) {
  print(x)
  x <- x - 2
}
```

##  Controlling `while` Loop with External Conditions

- The variable x is initially set to 10.
- The while loop continues executing as long as x is greater than 0.
- In each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of x.
- After printing, x is decremented by 2 using the assignment statement x <- x - 2.
- The loop continues until x becomes non-positive, at which point the condition becomes FALSE, and the loop terminates.
- Result: The numbers 10, 8, 6, 4, and 2 are printed.

## `break` statement
* The break statement in R is used to exit a loop prematurely.
* It is typically used within conditional statements to terminate the loop based on a specific condition.

## `break` Statement Example

```{r}
i <- 1

while (i <= 10) {
  print(i)
  if (i == 5) {
    break
  }
  i <- i + 1
}

```

## `break` Statement Example
- The variable i is initially set to 1.
- The while loop continues executing as long as i is less than or equal to 10.
- In each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.
- The if statement checks if i is equal to 5.
- If the condition is TRUE, the break statement is encountered, causing the loop to terminate immediately.
- After the break statement, the remaining code within the loop is not executed.
- Result: The numbers 1 to 5 are printed, and the loop terminates when i becomes 5.


## `next` statement
- The next statement in R is used to skip the current iteration of a loop and move to the next iteration.
- It is typically used within conditional statements to control the flow of the loop based on a specific condition.

## `next` Statement Example
```{r}
for (i in 1:5) {
  if (i == 3) {
    next
  }
  print(i)
}
```

* The for loop iterates over the values 1 to 5.
* In each iteration, the code block inside the curly braces is executed.
* The if statement checks if i is equal to 3.
* If the condition is TRUE, the next statement is encountered, causing the current iteration to be skipped, and the program flow moves to the next iteration.
* If the condition is FALSE, the code block continues executing, and the value of i is printed.
* Result: The numbers 1, 2, 4, and 5 are printed. The iteration with i equal to 3 is skipped.


## `repeat` loop
- The repeat loop in R allows for executing a block of code repeatedly until a specified condition is met.
- It provides a way to create an infinite loop that can be terminated using control flow statements.

## `repeat` loop Example 
```{r}
i <- 1

repeat {
  print(i)
  i <- i + 1
  if (i > 5) {
    break
  }
}
```

## `repeat` loop Example 
- The variable i is initially set to 1.
- The repeat loop continues executing the code block inside the curly braces indefinitely.
- In each iteration, the value of i is printed.
- The variable i is incremented by 1 using the assignment statement i <- i + 1.
- The if statement checks if i is greater than 5.
- If the condition is TRUE, the break statement is encountered, causing the loop to terminate.
- After the break statement, the program flow continues with the next statement after the loop.
- Result: The numbers 1 to 5 are printed, and the loop terminates when i becomes greater than 5.
