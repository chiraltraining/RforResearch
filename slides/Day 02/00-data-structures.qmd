# Data Structure 

## What is Data Structure? 
- Data structures are ways of organizing and storing data in a computer system.
- They define the format, organization, and relationship between data elements.
- Data structures facilitate efficient operations such as insertion, deletion, searching, and sorting of data.
- They provide a foundation for building algorithms and designing efficient programs.

## Data Structures in R 
* Vectors 
* Matrix 
* Lists 
* Data Frame 
* Factor 

## Types of Data Structures in R 
* One-Dimensional Data Structures
  - One-dimensional data structures in R are used to store and manipulate data along a single dimension. 
  - The main one-dimensional data structure in R is the `vector.`
* Two-Dimensional Data Structures
  - Two-dimensional data structures in R are used to store and manipulate data in a tabular format with rows and columns.
  - The main two-dimensional data structures in R are `matrices` and `data frames`. 
  
  
## Strings
* A string is a sequence of characters. For example, `"Programming"` is a string that includes characters: P, r, o, g, r, a, m, m, i, n, g.

* In R, we represent strings using quotation marks (double quotes, " " or single quotes, ' '). For example,

```{r, str-1}
# string value using single quotes
'Hello' 

# string value using double quotes 
"Hello" 
```

## String Operations in R
R provides us various built-in functions that allow us to perform different operations on strings. Here, we will look at some of the commonly used string functions.

* Find the length of a string
* Join two strings
* Compare two strings
* Change the string case

## Find Length of String

We use the `nchar()` method to find the length of a string. For example,

```{r, str-2}
message1 <- "CHIRAL Bangladesh"
# use of nchar() to find length of message1 
nchar(message1)
```

Here, `nchar()` returns the number of characters present inside the string.

## Join Strings Together
In R, we can use the `paste()` function to join two or more strings together. For example,

```{r, str-3}
message1 <- "CHIRAL"
message2 <- "Bangladesh"

# use paste() to join two strings
paste(message1, message2)
```

Here, we have used the `paste()` function to join two strings: `message1` and `message2`.

## Compare Two Strings in R Programming

We use the `==` operator to compare two strings. If two strings are equal, the operator returns `TRUE.` Otherwise, it returns `FALSE.` For example,

```{r, str-4}
message1 <- "Hello, World!"
message2 <- "Hi, Bangladesh!"
message3 <- "Hello, CHIRAL!"
# `message1 == message2` - returns FALSE because two strings are not equal
print(message1 == message2)

#`message1 == message3` - returns TRUE because both strings are equal 
print(message1 == message3)
```

## Change Case of R String
In R, we can change the case of a string using

* `toupper()` - convert string to uppercase
* `tolower()` - convert string to lowercase

```{r, str-5}
message <- "R Programming"

# change string to uppercase
message_upper <- toupper(message)
message_upper

# change string to lowercase
message_lower <- tolower(message)
message_lower
```

## Vector
* Vector is a basic data structure in R.
* It contains element of the same type.
* The data types can be logical, integer, double, character, and complex.
* A vector’s type can be checked with the `typeof()` function.

## Creating Vectors - Using the c() Function
The `c()` function is used to concatenate or combine elements into a vector. 

```{r, vector-1}
# Numeric vector
numeric_vector <- c(1, 2, 3, 4, 5)

# Character vector
character_vector <- c("apple", "banana", "orange")

# Logical vector
logical_vector <- c(TRUE, FALSE, TRUE)
```

## Creating Vectors - Using the `:` Operator
The `:` operator generates a sequence of numbers from the starting value to the ending value.

```{r, vector-2}
# Numeric sequence vector
numeric_sequence <- 1:10
```

## Creating Vectors - Using Sequence Generation Functions
R provides functions like `seq()`, `rep()`, and `seq_len()` to generate sequences of numbers. 

```{r, vector-3}
# Numeric sequence vector using seq()
numeric_sequence <- seq(from = 1, to = 10, by = 2)

# Repeated values vector using rep()
repeated_values <- rep(0, times = 5)

# Index sequence vector using seq_len()
index_sequence <- seq_len(10)
```

## Creating Vectors - Using Vectorized Operations
Vectors can be created by performing operations on existing vectors or values. 

```{r, vector-4}
# Vector created using vectorized operation
new_vector <- numeric_vector * 2
```

## Creating Vectors - Mixing Objects

```{r, vector-5}
# Character 
x <- c(1.7, "a")
# Numeric 
y <- c(TRUE, 2)
# Character 
z <- c("a", TRUE)
```

## Matrix
* Matrix is a two dimensional data structure in R programming.
* Matrix is similar to vector but additionally contains the dimension attributes.
* All attributes of an object can be checked by `attributes()` function.
* Dimension can be checked by directly with the `dim() `function.
We can check if a variable is a matrix or not with the `class()` function.

## Creatinig Matrix
* Matrix can be created using the `matrix()` function. Here's the general syntax:

```{r, mat-1, eval=FALSE}
matrix(data, nrow, ncol, byrow, dimnames)
```

* `data:` The data elements used to fill the matrix. It can be a vector or a combination of vectors.
* `nrow:` The number of rows in the matrix.
* `ncol:` The number of columns in the matrix.
* `byrow:` A logical value specifying whether the matrix should be filled by row (TRUE) or by column (FALSE) (default).
* `dimnames:` Optional names for the rows and columns of the matrix.

## Creatinig Matrix

```{r, mat-2}
# Create a matrix using matrix function 
mat1 <- matrix(1:9, nrow = 3, ncol = 3) 

# Create a matrix using matrix function: only one dimension  
mat2 <- matrix(1:9, nrow = 3)

# Create a matrix using matrix function: filling by row-wise 
mat3 <- matrix(1:9, nrow = 3, byrow = TRUE)

# Create a matrix using matrix function: dimension names 
mat4 <- matrix(1:9, nrow = 3, dimnames = list(c("X", "Y", "Z"), 
                                             c("A","B","C")))
```

## Matrix Properties 

```{r, mat-3}
# Create a matrix using matrix function 
mat <- matrix(1:9, nrow = 3, dimnames = list(c("X", "Y", "Z"), 
                                             c("A","B","C")))
# Column Names 
colnames(mat) 

# Row Names 
rownames(mat)

# Dimension 
dim(mat)
```

## List
* List is a data structure having components of mixed data types.
* A vector having all elements of the same type is called atomic vector but a vector having elements of different type is called list.
* We can check if it’s a list with `typeof()` function and find its length using `length()` function.

## Creating List
List can be created using the list() function. Here's the general syntax:

```{r, list-1, eval=FALSE}
list(..., recursive = FALSE)
```

* `...`: The elements to be included in the list, separated by commas.
* `recursive`: A logical value specifying whether the list should allow nested lists (TRUE) or not (FALSE) (default).

## Creating List

```{r, list-2}
# Create a list 
L = list(1, "a", TRUE, 1+3i)

# Create a list with different elements
my_list <- list(
  name = "John Doe",  # Character value
  age = 30,  # Numeric value
  is_student = TRUE,  # Logical value
  scores = c(90, 85, 92),  # Numeric vector
  matrix_data = matrix(1:6, nrow = 2),  # Matrix
  sub_list = list("a", "b", "c")  # Nested list
)
```

## Factors
* In R, factors are used to represent categorical or discrete data with predefined levels or categories. 
*  Factors are useful when working with data that has distinct categories or when performing statistical analysis. 
* Factors are used to represent categorical data and can be ordered and unordered.

## Creating Factors
Factors are created using the factor() function in R. Here's the general syntax:

```{r, factor-1, eval=FALSE}
factor(x, levels, labels, ordered = FALSE)
```

* `x`: A vector or column of data that represents the categorical variable.
* `levels`: An optional argument specifying the unique levels or categories of the factor. If not provided, the distinct values in x are used as levels.
* `labels`: An optional argument specifying the labels for the levels. If not provided, the levels themselves are used as labels.
* `ordered`: A logical value indicating whether the factor should be treated as ordered (TRUE) or unordered (FALSE) (default).


## Creating Factors

```{r, factor-2}
# Create a factor using factor() function 
f <- factor(c("yes", "no", "yes", "no"))

# Check levels 
levels(f)
```

## Data Frame
* In R, a data frame is a two-dimensional tabular data structure similar to a table in a relational database. 
*  It consists of rows and columns, where each column can have a different data type. 
* Data frames are commonly used for storing and manipulating structured data, and they provide a convenient way to work with datasets. 
* Data frames can be created using the `data.frame()` function or by importing data from external sources.

## Create Data Frame
Data frames can be created using the data.frame() function or by importing data from external sources. Here's an example of creating a data frame in R:

```{r, df}
# Create a data frame
df <- data.frame(
  name = c("John", "Alice", "Bob"),
  age = c(25, 30, 35),
  city = c("New York", "London", "Paris"),
  stringsAsFactors = FALSE
)
```

## Data Conversion Functions in R
- Conversion functions in R help transform data between different types and formats.
- `as.character()`, `as.numeric()`, `as.integer()`, `as.logical()`, and `as.factor()` are commonly used conversion functions.
- These functions are essential for data preprocessing, ensuring data compatibility, and performing operations on different data types.

## `as.character()`
- as.character() function converts an object to a character string representation.
- Syntax: as.character(x)
- x: The object to be converted.

```{r}
# Convert numeric values to character strings
numbers <- c(1, 2, 3)
character_numbers <- as.character(numbers)
```

## `as.numeric()`
- as.numeric() function converts an object to numeric (floating-point) values.
- Syntax: as.numeric(x)
- x: The object to be converted.

```{r}
# Convert character strings to numeric values
character_numbers <- c("1", "2", "3")
numeric_numbers <- as.numeric(character_numbers)
```

## `as.integer()`
- as.integer() function converts an object to integer values.
- Syntax: as.integer(x)
- x: The object to be converted.

```{r}
# Convert numeric values to integer values
numbers <- c(1.5, 2.7, 3.9)
integer_numbers <- as.integer(numbers)
```

## `as.logical()`
- as.logical() function converts an object to logical (boolean) values.
- Syntax: as.logical(x)
- x: The object to be converted.

```{r}
# Convert numeric values to logical values
numbers <- c(0, 1, 2)
logical_values <- as.logical(numbers)
```

## `as.factor()`
- as.factor() function converts an object to a factor, which represents categorical data.
- Syntax: as.factor(x)
- x: The object to be converted.






