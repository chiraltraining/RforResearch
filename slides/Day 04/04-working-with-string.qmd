# Working with Strings

## The `stringr` package
The `stringr` package:

- Modifying or finding **part** or all of a character string
- We will not cover `grep` or `gsub` - base R functions
- They are used on forums for answers
- Almost all functions start with `str_*`

## `stringr`
- `str_detect`, and `str_replace` search for matches to argument pattern within each element of a character vector (not data frame or tibble!).
- `str_detect` - returns `TRUE` if `pattern` is found
- `str_replace` - replaces `pattern` with `replacement`

## `str_detect()`

- The `string` argument specifies what to check    
- The `pattern` argument specifies what to check for    

```{r, eval=FALSE}
x <- c("M", "male", "Man", "m", "Male", "F", "Female", "f", "female")
str_detect(string = x, pattern = "m")
```

## `str_replace()`

- The `string` argument specifies what to check    
- The `pattern` argument specifies what to check for    
- The `replacement` argument specifies what to replace the pattern with 
```{r, eval=FALSE}
x <- c("M", "male", "Man", "m", "Male", "F", "Female", "f", "female")
str_replace(string = x, pattern = "F", replacement = "f")
```

## Subsetting part of a string

- `str_sub()` allows you to subset part of a string   
- The `string` argument specifies what strings to work with     
- The `start` argument specifies position of where to start    
- The `start` argument specifies position of where to end    

```{r, eval=FALSE}
x <- c("M", "male", "Man", "m", "Male", "F", "Female", "f", "female")
str_sub(string = x, start = 1, end = 2)
```

## `filter` and `stringr` functions

```{r, eval=FALSE}
head(data_diet,n = 4)
data_diet %>% 
  filter(str_detect(string = Gender,
                    pattern = "M"))
```

## `case_when()` improved with `stringr`
```{r, eval = FALSE}
count(data_diet, Gender)
```

```{r, eval = FALSE}
data_diet %>% 
  mutate(Gender = case_when(
    Gender %in% c("M", "male", "Man", "m", "Male") ~ "Male",
    Gender %in% c("F", "Female", "f", "female")~ "Female",
    Gender %in% c("O", "Other") ~ "Other"))
```


## `case_when()` improved with `stringr`
- `^` indicates the beginning of a character string
- `$` indicates the end

```{r, eval = FALSE}
data_diet %>% 
  mutate(Gender = case_when(
    str_detect(string = Gender, pattern = "^m|^M") ~ "Male",
    str_detect(string = Gender, pattern = "^f|^F") ~ "Female",
    str_detect(string = Gender, pattern = "^o|^O") ~ "Other")) %>%
  count(Gender)
```

## Separating and uniting data

```{r, eval = FALSE}
diet_comb<-diet_effect %>% unite("change" , Diet:Effect, remove =TRUE)
diet_comb
```

## Separating columns based on a separator

- The `separate()` function from `tidyr` can split a column into multiple columns.   
- The `col` argument specifies what column to work with      
- The `into` argument specifies names of new columns   
- The `sep` argument specifies what to separate by

```{r, eval = FALSE}
diet_comb %>% 
  separate(col = change, into = c("Diet", "Change"), sep = "_" )
```

## Uniting columns 

- The `unite()` function can instead help combine columns.    
- The `col` argument specifies new column name    
- The `sep` argument specifies what separator to use when combining    
```{r unite_df,eval=FALSE}
df = tibble(id = rep(1:5, 3), visit = rep(1:3, each = 5))
head(df, 4)
```

```{r, eval=FALSE}
df_united <- df %>% unite(col = "unique_id", id, visit, sep = "_")
head(df_united, 4)
```
