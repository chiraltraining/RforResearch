# Recoding Variables

## Example of Recoding

```{r, eval=FALSE}
data_diet <- read.csv("data/diet_data.csv")
data_diet
```

Say we have some data about samples in a diet study:

This needs lots of recoding.

```{r, eval=FALSE}
data_diet %>%
  count(Gender)
```

## `dplyr` can help!

- Using Excel to find all of the different ways `gender` has been coded, could be hectic!

- In `dplyr` you can use the `recode` function (need `mutate` here too!):


```{r, eval = FALSE}
# General Format - this is not code!
{data_input} %>%
  mutate({variable_to_fix} = {Variable_fixing}, {old_value} = {new_value},
                                       {another_old_value} = {new_value})
```

```{r, eval = FALSE}
data_diet %>% 
  mutate(Gender = recode(Gender, M = "Male", 
                                 m = "Male", 
                               Man = "Male",
                                 O = "Other",
                                 f = "Female",
                                 F = "Female")) %>%
  count(Gender, Diet)
```

## `recode()`
```{r, eval = FALSE}

data_diet %>% 
  mutate(Gender = recode(Gender, M = "Male", 
                                 m = "Male", 
                               Man = "Male",
                                 O = "Other",
                                 f = "Female",
                                 F = "Female")) %>%
  count(Gender, Diet)
```

## Or you can use `case_when()`

The `case_when()` function of `dplyr` can help us to do this as well.

```{r, eval = FALSE}
# General Format - this is not code!
{data_input} %>%
  mutate({variable_to_fix} = case_when({Variable_fixing}   
                                /some condition/  ~ {value_for_con})

```

Note that automatically values not reassigned explicitly by
`case_when()` will be `NA` unless otherwise specified.


```{r, eval = FALSE}
data_diet %>% 
  mutate(Gender = case_when(Gender == "M" ~ "Male"))
```

## Use of `case_when()` without automatic `NA`

```{r, eval = FALSE}
# General Format - this is not code!
{data_input} %>%
  mutate({variable_to_fix} = case_when({Variable_fixing}   
             /some condition/ ~ {value_for_con},
                         TRUE ~ {value_for_not_meeting_condition})

```

Here we use the original values of `Gender` to replace all values of `Gender` that do not meet the condition `== "M"`.

```{r, eval=FALSE}
data_diet %>% 
  mutate(Gender = case_when(Gender == "M" ~ "Male",
                                     TRUE ~ Gender))
```

## More complicated case_when()

```{r, eval=FALSE}
data_diet %>% 
  mutate(Gender = case_when(
    Gender %in% c("M", "male", "Man", "m", "Male") ~ "Male",
    Gender %in% c("F", "Female", "f", "female")~ "Female",
    Gender %in% c("O", "Other") ~ "Other"))

```

## Another reason for `case_when()`

`case_when` can do very sophisticated comparisons

```{r, eval=FALSE}

data_diet <-data_diet %>% 
      mutate(Effect = case_when(Weight_change > 0 ~ "Increase",
                                Weight_change == 0 ~ "Same",
                                Weight_change < 0 ~ "Decrease"))

head(data_diet)
```

```{r, eval=FALSE}
data_diet %>% 
  count(Diet, Effect)
```