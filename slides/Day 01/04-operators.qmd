# Operators in R

## Operators in R

-   In R, operators are symbols or characters that perform specific operations on variables, values, or expressions.
-   R provides various types of operators, including arithmetic operators, assignment operators, comparison operators, logical operators, and more.
-   Operators in R can mainly be classified into the following categories.
    -   Arithmetic Operators
    -   Relational Operators
    -   Logical Operators

## Arithmetic Operators

| Operator | Operation      | Example     |
|----------|----------------|-------------|
| \+       | Addition       | 5 + 2 = 7   |
| \-       | Subtraction    | 4 - 2 = 2   |
| \*       | Multiplication | 2 \* 3 = 6  |
| /        | Division       | 4 / 2 = 2   |
| %%       | Modulo         | 5 %% 2 = 1  |
| \^       | Power          | 4 \^ 2 = 16 |

## Example: Arithmetic Operators

```{r, arithmetic-operators}
x <- 10 
y <- 2 

# Addition
x+y

# Subtraction
2-5

# Multiplication
2 * 5 

# Division
2 / 5 
```

## Example: Arithmetic Operators

```{r, arithmetic-operators-2}
x <- 10 
y <- 2 

# Exponent 
2 ^ 5

# Modulus(Remainder from division)
2 %% 5
```

## Relational Operators

| Operator | Operation                | Example                    |
|----------|--------------------------|----------------------------|
| \>       | Greater that             | `5 > 6` returns `FALSE`    |
| \<       | Less than                | `5 < 6` returns `TRUE`     |
| ==       | Equals to                | `10 == 10` returns `TRUE`  |
| !=       | Not equal to             | `10 != 10` returns `FALSE` |
| \>=      | Greater than or equal to | `5 >= 6` returns `FALSE`   |
| \<=      | Less than or equal to    | `6 <= 6` returns `TRUE`    |

## Example: Relational Operators

The `output` of a comparison is a `boolean value`. For example, to check if two numbers are equal, you can use the `==` operator.

```{r, relational-operators-1}
x <- 10
y <- 23

# compare x and y
x == y # FALSE
```

Similarly, to check if x is less than y, you can use the `<` operator.

```{r, relational-operators-2}
x <- 10
y <- 23

# compare x and y
x < y # TRUE
```

## Logical Operators

Logical operators are used to compare the output of two comparisons. There are `three` types of logical operators in R. They are:

-   AND operator (&)
-   OR operator (\|)
-   NOT operator (!)

## AND Operator (&)

-   The AND operator `&` takes as input two logical values and returns the output as another logical value.

-   The output of the operator is `TRUE` only when `both` the input logical values are either `TRUE` or evaluated to `TRUE.`

-   Let a and b represent two operands. 0 represents FALSE and 1 represents TRUE. Then,

|  a  |  b  | a & b |
|:---:|:---:|:-----:|
|  1  |  1  |   1   |
|  1  |  0  |   0   |
|  0  |  1  |   0   |
|  0  |  0  |   0   |

## Example: AND Operator (&)

```{r, and-1}
# print & of TRUE and FALSE combinations
TRUE & TRUE
TRUE & FALSE
FALSE & TRUE
FALSE & FALSE
```

```{r, and-2}
# print & of TRUE and FALSE combinations
x <- 10
y <- 23
z <- 12

# compare 
x<y & y>z
```

## OR Operator (\|)

The OR operator \| returns TRUE if all or any one of the logical inputs is TRUE or evaluates to TRUE. If all of them are FALSE, then it returns FALSE. Consider the table below.

|  a  |  b  | a \| b |
|:---:|:---:|:------:|
|  1  |  1  |   1    |
|  1  |  0  |   1    |
|  0  |  1  |   1    |
|  0  |  0  |   0    |

## Example: OR Operator (\|)

```{r, or}
# print | of TRUE and FALSE combinations
TRUE | TRUE
TRUE | FALSE
FALSE | TRUE
FALSE | FALSE
```

```{r, or-2}
# print | of TRUE and FALSE combinations
w <- 54
x <- 12
y <- 25
z <- 1

w>x | x>y | z>w
```

## NOT (\!) Operator

The NOT operator ! is used to negate the logical values it is used on. If the input value is TRUE, it will turn to FALSE and vice-versa.

| a   | !a  |
|-----|-----|
| 1   | 0   |
| 0   | 1   |

## Example: NOT (\!) Operator
```{r, not}
# print ! of TRUE and FALSE
!TRUE
!FALSE
```
Here, the output is the negation of the input.

- We can use the ! operator with comparisons. 
- For example, !(x > 12) is the same as x <= 12. This means that x is not greater than 12. Which means that x can be less than or equal to 12.
