# Combine Data 

## Mutating Joins
Mutating joins are a type of join operation in R that combines two datasets based on matching values in one or more key columns and adds new columns from one dataset to another.

## Left Join
- Returns all rows from the left dataset and the matching rows from the right dataset.
- Syntax: `left_join(x, y, by = "key_column")`

```{r, eval=FALSE}
# Perform left join
merged_data <- left_join(data1, data2, by = "key_column")
```

## Right Join
- Returns all rows from the right dataset and the matching rows from the left dataset.
- Syntax: `right_join(x, y, by = "key_column")`

```{r, eval=FALSE}
# Perform right join
merged_data <- right_join(data1, data2, by = "key_column")
```


## Inner Join
- Returns only the matching rows from both datasets.
- Syntax: `inner_join(x, y, by = "key_column")`

```{r, eval=FALSE}
# Perform inner join
merged_data <- inner_join(data1, data2, by = "key_column")
```

## Full Join
- Returns all rows from both datasets, filling in missing values with NA where there are no matches.
- Syntax: `full_join(x, y, by = "key_column")`

```{r, eval=FALSE}
# Perform full join
merged_data <- full_join(data1, data2, by = "key_column")
```

## Filtering Joins
Filtering joins are a type of join operation in R that combines two datasets based on matching values in one or more key columns and filters the resulting data based on additional conditions.

## Semi Join
- Returns only the rows from the left dataset that have matching values in the right dataset.
- Syntax: `semi_join(x, y, by = "key_column")`

```{r, eval=FALSE}
# Perform semi join
filtered_data <- semi_join(data1, data2, by = "key_column")
```

## Anti Join
- Returns only the rows from the left dataset that do not have matching values in the right dataset.
- Syntax: `anti_join(x, y, by = "key_column")`

```{r, eval=FALSE}
# Perform anti join
filtered_data <- anti_join(data1, data2, by = "key_column")
```

## Set Operations
Set operations in R allow you to perform operations on sets or vectors, such as finding unique elements, merging sets, and identifying common or distinct elements.

## Intersect

- The `intersect()` function in the dplyr package allows you to find the common elements between two data frames or tibbles. 
- Syntax: `intersect(data1, data2)`

```{r, eval=FALSE}
# Find common elements between data frames y and z
common_data <- intersect(y, z)
```

## Union
- The `union()` function in the dplyr package allows you to combine two data frames or tibbles and return a new data frame containing all unique rows from both data frames. 
- Syntax: `union(data1, data2)`

```{r, eval=FALSE}
# Combine data frames y and z and get unique rows
combined_data <- union(y, z)

```

## Setdiff
- The `setdiff()` function in the dplyr package allows you to find the rows in one data frame that are not present in another data frame. 
- Syntax: `setdiff(data1, data2)`

```{r, eval=FALSE}
# Find rows in data frame y that are not present in data frame z
diff_data <- setdiff(y, z)
```

## Binding Data 
In R, you can combine data frames or vectors by binding them together either vertically or horizontally. This allows you to merge or append data from different sources into a single data structure.

## Bind Rows 
- The `bind_rows()` function in the dplyr package allows you to vertically bind or combine data frames or tibbles by matching column names. 
- Syntax: `bind_rows(y, z)`

```{r, eval=FALSE}
# Vertically bind data frames y and z
merged_data <- bind_rows(y, z)
```

## Bind Columns  
- The `bind_cols()` function in the dplyr package allows you to horizontally bind or combine data frames or tibbles by matching row names. 
- Syntax: `bind_cols(y, z)`

```{r, eval=FALSE}
# Horizontally bind data frames y and z
merged_data <- bind_cols(y, z)
```