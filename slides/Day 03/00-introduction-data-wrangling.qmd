```{r}
#| echo: false
#| cache: false
# fill for font awesome icons
fa_fill <- "#606060"
```

## Agenda 
- Data Wrangling
- Data IO 
- Exploring Data
- Subset Observations (Rows)
- Subset Variables (Columns)
- Make New Variables
- Summarise Data
- Group Data
- Reshaping Data
- Combine Data 

# Data Wrangling

## Introduction to Data Wrangling
- Data wrangling is the process of transforming and preparing raw data into a structured format suitable for analysis.
- It involves cleaning, reshaping, merging, and aggregating data to make it usable and informative.

```{r, echo=FALSE}
knitr::include_graphics("images/data-wrangling.png")
```

## Why Data Wrangling?
- Raw data often requires cleaning and transformation before analysis.
- Data may have missing values, inconsistencies, or be in an unstructured format.
- Data wrangling ensures data quality, consistency, and usability for analysis.

## Data Wrangling Steps
- Data Acquisition
  - Obtain data from various sources such as files, databases, APIs, or web scraping.
- Data Cleaning
  - Handle missing values, outliers, and inconsistencies.
  - Standardize data formats, remove duplicates, and correct errors.
  
- Data Transformation
  - Reshape data to the desired format.
  - Convert data types, rename variables, and create new variables.

## Data Wrangling Steps

- Data Merging
  - Combine multiple datasets based on common variables.
  - Join, merge, or append datasets as needed.

- Data Aggregation
  - Summarize data by grouping variables.
  - Calculate summary statistics, counts, or averages.

## Tools for Data Wrangling
R provides several packages for data wrangling, including:

- `dplyr`: Provides functions for data manipulation, filtering, and aggregation.
- `tidyr`: Offers functions for reshaping data and handling missing values.
- `stringr`: Provides string manipulation functions.
- `readr`: Helps in reading and writing structured data files.
- `purrr`: Offers functions for working with lists and vectors.

##  Data Wrangling Best Practices

- Have a clear plan and understanding of the data wrangling tasks.
- Document and track the steps performed for reproducibility.
- Use functions and packages specifically designed for data wrangling.
- Validate and test the results at each stage.
- Consider using automated and efficient workflows.


## Data Manipulation
- The `tidyverse` collection of packages in R provides a powerful set of tools for data manipulation and analysis.
- Within the `tidyverse`, you can use `dplyr` functions to subset observations (rows) of a dataset based on specific conditions.

## What is `dplyr`?
- The `dplyr` package was developed by Hadley Wickham of RStudio. 
- `dplyr` is a new package which provides a set of tools for efficiently manipulating datasets in R.
- `dplyr` is the next iteration of `plyr` , focussing on only data frames. 
- With `dplyr` , anything you can do to a local data frame you can also do to a remote database table.

## Why `dplyr`?
- Great for data exploration and transformation
- Intuitive to write and easy to read, especially when using the “chaining” syntax (covered below)
- Fast on data frames

## `dplyr` Functionality
- Five basic verbs: `filter`, `select`, `arrange`, `mutate`, `summarise` and `groub_by`
- Can work with data stored in databases and data tables
- Joins: inner join, left join, semi-join, anti-join
- Window functions for calculating ranking, offsets, and more
- Better than plyr if you’re only working with data frames (though it doesn’t yet duplicate all of the plyr functionality)

## `dplyr` Grammar
- `select`: return a subset of the column of a data franme, using a flexible notation. 
- `filter`: extract a subset of rows from a data frame based on logical conditions.
- `arrange`: reorder rows of data frame 
- `mutate`: add new variables/columns or transform existing variables. 
- `summarise/summarize`: generate summary statistics of different variables in the data frame, possibly within strata. 
- `%>%` "pipe" operator used to connect multiple verb actions together into a pipeline. 


